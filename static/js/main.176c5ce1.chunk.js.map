{"version":3,"sources":["utils/createFormatter.ts","api/useRestaurants.ts","layouts/ContentWithSidebar.tsx","components/Form/Form.context.ts","components/Form/FormControl.tsx","components/Form/Input.tsx","components/Form/SearchInput.tsx","components/Form/Select.tsx","components/Form/Form.tsx","constants/States.ts","constants/Genres.ts","routes/RestaurantSearch/components/RestaurantSearchControls/RestaurantSearchControls.tsx","routes/RestaurantSearch/components/RestaurantTable/RestaurantTable.tsx","routes/RestaurantSearch/components/RestaurantSearchHeader/RestaurantSearchHeader.tsx","components/InlineError/InlineError.tsx","components/Table/Table.tsx","routes/RestaurantSearch/RestaurantSearch.tsx","routes/RestaurantSearch/RestaurantSearch.hooks.ts","app/App.component.tsx","utils/serviceWorker.ts","index.tsx"],"names":["transformFunc","res","Promise","resolve","reject","a","async","ok","Error","json","message","apiKey","endpoint","formatRestaurantData","restaurantData","map","restaurant","tags","split","genre","sort","b","name","Header","children","className","style","background","Container","Row","Col","Sidebar","as","sm","MainContent","Body","ContentWithSidebar","FormContext","createContext","control","register","FormControl","props","useContext","Control","ref","Input","Group","controlId","label","Label","type","subText","Text","SearchInput","InputGroup","placeholder","Append","Button","onClick","marginTop","Select","options","onChange","e","custom","value","Object","keys","optionKey","key","Form","Provider","process","FormBase","States","Genres","InputNames","RestaurantTableHeaders","RestaurantSearchControls","onSubmit","prevSearch","useRef","searchTouched","form","useForm","mode","searchValue","watch","textSearch","handleSubmit","formData","useEffect","current","Boolean","stateSelect","genreSelect","RestaurantSearchHeader","InlineError","error","classnames","defaultProps","pageSize","data","noDataMsg","Table","baseProps","useState","currentPage","setCurrentPage","shouldRenderPagination","length","currentPageData","slice","striped","bordered","hover","size","values","headers","header","i","columnWidth","columnWidths","width","undefined","isLoading","Array","from","_","headerKey","colSpan","dataRow","id","text","lines","moreText","lessText","Pagination","Math","ceil","pageNumber","Item","active","RestaurantTable","restaurantTableData","restaurants","useMemo","join","useRestaurantTableData","RestaurantSearch","controlData","setControlData","useFetch","Authorization","method","formatter","createFormatter","useRestaurants","filteredData","reduce","filtered","match","RegExp","city","state","find","useFilteredData","AppComponent","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.176c5ce1.chunk.js","sourcesContent":["type FormatterFunc<RawData, FormattedData> = (rawData: RawData) => FormattedData\n\nexport default function<RawData, FormattedData> (transformFunc: FormatterFunc<RawData, FormattedData>) {\n  return (res: Response) => {\n    // eslint-disable-next-line no-async-promise-executor\n    return new Promise<FormattedData>(async (resolve, reject) => {\n      try {\n        if (!res.ok) throw new Error((await res.json())?.message)\n        resolve(transformFunc(await res.json()))\n      } catch (err) {\n        reject(err)\n      }\n    })\n  }\n}\n","import useFetch, { HookOptions } from 'react-fetch-hook'\nimport createFormatter from 'utils/createFormatter'\n\n// NOTE: In a real production app I would store the api key and uri base in an .env file\nconst apiKey = 'Api-Key q3MNxtfep8Gt'\nconst endpoint = 'https://code-challenge.spectrumtoolbox.com/api/restaurants'\n\ninterface RestaurantBase {\n  id: string,\n  name: string,\n  address1: string,\n  city: string,\n  state: string,\n  zip: string,\n  lat: string,\n  long: string,\n  telephone: string,\n  website: string,\n  hours: string,\n  attire: string\n}\n\nexport interface Restaurant extends RestaurantBase {\n  tags: string,\n  genre: string\n}\n\nexport interface FormattedRestaurant extends RestaurantBase {\n  tags: string[],\n  genre: string[]\n}\n\nconst formatRestaurantData = (restaurantData: Restaurant[]): FormattedRestaurant[] => (\n  restaurantData.map((restaurant: Restaurant) => ({\n    ...restaurant,\n    tags: restaurant.tags.split(','),\n    genre: restaurant.tags.split(',')\n  })).sort((a, b) => a.name > b.name ? 1 : -1)\n)\n\nexport const useRestaurants = (options: HookOptions = {}) => (\n  useFetch<FormattedRestaurant[]>(endpoint, {\n    headers: { Authorization: apiKey },\n    method: 'GET',\n    formatter: createFormatter<Restaurant[], FormattedRestaurant[]>(formatRestaurantData),\n    ...options\n  })\n)\n","import React, { FC } from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nexport const Header: FC = ({ children }) => (\n  <header className='mb-3' style={{ background: 'gainsboro' }}>\n    <Container>\n      <Row>\n        <Col>\n          {children}\n        </Col>\n      </Row>\n    </Container>\n  </header>\n)\n\nexport const Sidebar: FC = ({ children }) => (\n  <Col as='aside' sm={3}>\n    {children}\n  </Col>\n)\n\nexport const MainContent: FC = ({ children }) => (\n  <Col as='main' sm={9}>\n    {children}\n  </Col>\n)\n\nexport const Body: FC = ({ children }) => (\n  <Container>\n    <Row>\n      {children}\n    </Row>\n  </Container>\n)\n\nconst ContentWithSidebar: FC = ({ children }) => (\n  <>\n    {children}\n  </>\n)\n\nexport default ContentWithSidebar\n","import { createContext, useContext } from 'react'\n\nexport const FormContext = createContext({\n  control: null,\n  register: null\n})\n\nexport const useFormContext = () => useContext(FormContext)\n","// @ts-ignore\nimport FormBase from 'react-bootstrap/Form'\nimport { useFormContext } from './Form.context'\nimport React from 'react'\n\n// @ts-ignore\nconst FormControl: typeof FormBase.Control = props => {\n  const { register } = useFormContext()\n\n  return (\n    <FormBase.Control ref={register} {...props} />\n  )\n}\n\nexport default FormControl\n","import React, { FC } from 'react'\nimport FormBase from 'react-bootstrap/Form'\n\nimport BoundFormControl from './FormControl'\n\ntype InputProps = {\n  name: string,\n  label?: string,\n  subText?: string\n  type?: string\n}\n\nconst Input: FC<InputProps> = props => (\n  <FormBase.Group controlId={props.name}>\n    {props.label && <FormBase.Label>{props.label}</FormBase.Label>}\n    <BoundFormControl name={props.name} type={props.type || 'text'} />\n    {props.subText && <FormBase.Text>{props.subText}</FormBase.Text>}\n  </FormBase.Group>\n)\n\nexport default Input\n","import React, { FC } from 'react'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Button from 'react-bootstrap/Button'\nimport { BsSearch } from 'react-icons/bs'\n\nimport FormControl from './FormControl'\n\nconst SearchInput: FC<any> = props => (\n  <InputGroup>\n    <FormControl\n      name={props.name}\n      type='text'\n      placeholder={props.placeholder}\n    />\n    <InputGroup.Append>\n      <Button onClick={props.onClick}>\n        <BsSearch style={{ marginTop: -3 }} />\n      </Button>\n    </InputGroup.Append>\n  </InputGroup>\n)\n\nexport default SearchInput\n","import React, { FC, ChangeEvent } from 'react'\nimport FormBase from 'react-bootstrap/Form'\n\nimport BoundFormControl from './FormControl'\n\ninterface OptionsEnum {\n  [key: string]: string\n}\n\ntype SelectProps = {\n  name: string,\n  options: OptionsEnum,\n  placeholder?: string,\n  className?: string,\n  label?: string,\n  subText?: string\n  onChange?: (e: ChangeEvent) => any\n}\n\nconst Select: FC<SelectProps> = ({ name, options, placeholder, className, label, subText, onChange }) => (\n  <FormBase.Group className={className} controlId={name}>\n    {label && <FormBase.Label>{label}</FormBase.Label>}\n    <BoundFormControl name={name} onChange={e => onChange?.(e)} as='select' custom>\n      {placeholder && <option value=''>{placeholder}</option>}\n      {Object.keys(options).map(optionKey => (\n        <option key={optionKey} value={options[optionKey]}>{options[optionKey]}</option>\n      ))}\n    </BoundFormControl>\n    {subText && <FormBase.Text>{subText}</FormBase.Text>}\n  </FormBase.Group>\n)\n\nexport default Select\n","import React, { FC } from 'react'\nimport { DevTool } from '@hookform/devtools'\nimport FormBase, { FormProps } from 'react-bootstrap/Form'\n\nimport { FormContext } from './Form.context'\nimport Input from './Input'\nimport FormControl from './FormControl'\nimport SearchInput from './SearchInput'\nimport Select from './Select'\n\nconst IS_DEV = process.env.NODE_ENV === 'development'\n\ntype ExtendedFormProps = FormProps & {\n  control: any,\n  register: any\n}\n\ntype FormSubComponents = {\n  Group: typeof FormBase.Group,\n  Label: typeof FormBase.Label,\n  Control: typeof FormBase.Control,\n  Text: typeof FormBase.Text,\n  Input: typeof Input,\n  SearchInput: typeof SearchInput,\n  Select: typeof Select\n}\n\nconst Form: FC<ExtendedFormProps> & FormSubComponents = ({ control, register, children, ...props }) => (\n  <FormContext.Provider value={{ control, register }}>\n    <FormBase {...props}>{children}</FormBase>\n    {IS_DEV && <DevTool control={control} />}\n  </FormContext.Provider>\n)\n\nForm.Group = FormBase.Group\nForm.Label = FormBase.Label\nForm.Control = FormControl\nForm.Text = FormBase.Text\nForm.Input = Input\nForm.SearchInput = SearchInput\nForm.Select = Select\n\nexport default Form\n","export enum States {\n  AL = 'AL',\n  AK = 'AK',\n  AS = 'AS',\n  AZ = 'AZ',\n  AR = 'AR',\n  CA = 'CA',\n  CO = 'CO',\n  CT = 'CT',\n  DE = 'DE',\n  DC = 'DC',\n  FM = 'FM',\n  FL = 'FL',\n  GA = 'GA',\n  GU = 'GU',\n  HI = 'HI',\n  ID = 'ID',\n  IL = 'IL',\n  IN = 'IN',\n  IA = 'IA',\n  KS = 'KS',\n  KY = 'KY',\n  LA = 'LA',\n  ME = 'ME',\n  MH = 'MH',\n  MD = 'MD',\n  MA = 'MA',\n  MI = 'MI',\n  MN = 'MN',\n  MS = 'MS',\n  MO = 'MO',\n  MT = 'MT',\n  NE = 'NE',\n  NV = 'NV',\n  NH = 'NH',\n  NJ = 'NJ',\n  NM = 'NM',\n  NY = 'NY',\n  NC = 'NC',\n  ND = 'ND',\n  MP = 'MP',\n  OH = 'OH',\n  OK = 'OK',\n  OR = 'OR',\n  PW = 'PW',\n  PA = 'PA',\n  PR = 'PR',\n  RI = 'RI',\n  SC = 'SC',\n  SD = 'SD',\n  TN = 'TN',\n  TX = 'TX',\n  UT = 'UT',\n  VT = 'VT',\n  VI = 'VI',\n  VA = 'VA',\n  WA = 'WA',\n  WV = 'WV',\n  WI = 'WI',\n  WY = 'WY'\n}\n","export enum Genres {\n  social = 'Social',\n  foodAndDining = 'Food and Dining',\n  restaurants = 'Restaurants',\n  american = 'American',\n  seafood = 'Seafood',\n  steakhouses = 'Steakhouses',\n  french = 'French',\n  international = 'International',\n  italian = 'Italian',\n  cafes = 'Cafes',\n  coffeeAndTeaHouses = 'Coffee and Tea Houses',\n  bars = 'Bars',\n  entertainment = 'Entertainment',\n  musicAndShowVenues = 'Music and Show Venues',\n  japanese = 'Japanese',\n  sushi = 'Sushi',\n  bakeries = 'Bakeries',\n}\n","import React, { FC, useEffect, useRef } from 'react'\nimport { useForm } from 'react-hook-form'\n\nimport Form from 'components/Form'\nimport { States } from 'constants/States'\nimport { Genres } from 'constants/Genres'\n\nenum InputNames {\n  textSearch = 'textSearch',\n  stateSelect = 'stateSelect',\n  genreSelect = 'genreSelect'\n}\n\nexport type RestaurantSearchControlData = {\n  [InputNames.textSearch]: string,\n  [InputNames.stateSelect]: string,\n  [InputNames.genreSelect]: string,\n}\n\ntype SearchControlProps = {\n  onSubmit?: (formData: RestaurantSearchControlData) => any\n}\n\nconst RestaurantSearchControls: FC<SearchControlProps> = ({ onSubmit }) => {\n  const prevSearch = useRef('')\n  const searchTouched = useRef(false)\n\n  const form = useForm<RestaurantSearchControlData>({ mode: 'onChange' })\n  const searchValue = form.watch(InputNames.textSearch)\n\n  const handleSubmit = form.handleSubmit(formData => {\n    onSubmit?.(formData)\n  })\n\n  useEffect(() => {\n    searchTouched.current = searchTouched.current || Boolean(searchValue)\n    if (searchTouched.current && searchValue === '' && prevSearch.current !== '') {\n      handleSubmit()\n    }\n    prevSearch.current = searchValue\n  }, [searchValue, handleSubmit])\n\n  return (\n    <Form\n      control={form.control}\n      register={form.register}\n      onSubmit={handleSubmit}\n    >\n      <Form.SearchInput\n        placeholder='Search Restaurants'\n        name={InputNames.textSearch}\n        onClick={handleSubmit}\n      />\n      <Form.Select\n        className='mt-3'\n        label='Select State'\n        placeholder='All'\n        name={InputNames.stateSelect}\n        options={States}\n        onChange={handleSubmit}\n      />\n      <Form.Select\n        className='mt-3'\n        label='Select Cuisine Type'\n        placeholder='All'\n        name={InputNames.genreSelect}\n        options={Genres}\n        onChange={handleSubmit}\n      />\n    </Form>\n  )\n}\n\nexport default RestaurantSearchControls\n","import React, { FC, useMemo } from 'react'\n\nimport { FormattedRestaurant, Restaurant } from 'api'\nimport Table from 'components/Table'\n\nenum RestaurantTableHeaders {\n  name = 'Name',\n  city = 'City',\n  state = 'state',\n  telephone = 'Phone Number',\n  genre = 'Cuisine Types'\n}\n\ninterface RestaurantTableProps {\n  isLoading: boolean,\n  data?: FormattedRestaurant[],\n  error?: any\n}\n\nconst useRestaurantTableData = (restaurants: FormattedRestaurant[] = []) => (\n  useMemo<Restaurant[]>(() => (\n    restaurants.map(restaurant => ({\n      ...restaurant,\n      genre: restaurant.genre.join(', '),\n      tags: restaurant.tags.join((', '))\n    }))\n  ), [restaurants])\n)\n\nconst RestaurantTable: FC<RestaurantTableProps> = ({ data, isLoading, error }) => {\n  const restaurantTableData = useRestaurantTableData(data)\n\n  return (\n    <Table\n      columnWidths={[2, 2, 2, 2, 4]}\n      isLoading={isLoading}\n      error={error}\n      data={restaurantTableData}\n      headers={RestaurantTableHeaders}\n      noDataMsg='There are no restaurants that match your filters.'\n    />\n  )\n}\n\nexport default RestaurantTable\n","import React from 'react'\n\nconst RestaurantSearchHeader: React.FC = () => (\n  <h1>Restaurant Search</h1>\n)\n\nexport default RestaurantSearchHeader\n","import './InlineError.styles.css'\n\nimport React, { FC } from 'react'\nimport { BsFillExclamationTriangleFill } from 'react-icons/bs'\nimport classnames from 'classnames'\n\ntype InlineErrorProps = {\n  error?: {\n    message: string\n  }\n}\n\nconst InlineError: FC<InlineErrorProps> = ({ error }) => {\n  if (!error?.message) return null\n\n  return (\n    <p className={classnames('inline-error--root', 'm-0')}>\n      <BsFillExclamationTriangleFill className='inline-error--icon' /> {error?.message}\n    </p>\n  )\n}\n\nexport default InlineError\n","import './Table.styles.css'\n\nimport React, { FC, useState } from 'react'\nimport ClampLines from 'react-clamp-lines'\nimport Skeleton from 'react-loading-skeleton'\nimport BaseTable from 'react-bootstrap/Table'\nimport Pagination from 'react-bootstrap/Pagination'\n\nimport InlineError from 'components/InlineError'\n\ninterface TableHeaderEnum {\n  [key: string]: string\n}\n\ntype DefaultProps = {\n  pageSize: number,\n  data: any[],\n  noDataMsg: string\n}\n\nconst defaultProps: DefaultProps = {\n  pageSize: 10,\n  data: [],\n  noDataMsg: 'No data found'\n}\n\ntype TableProps = {\n  headers: TableHeaderEnum\n  isLoading: boolean,\n  columnWidths?: number[],\n  pageSize?: number,\n  error?: any,\n  data?: any[],\n  noDataMsg?: string\n}\n\nconst Table: FC<TableProps> = baseProps => {\n  const props = { ...defaultProps, ...baseProps }\n  const [currentPage, setCurrentPage] = useState(1)\n  const shouldRenderPagination = props.data.length > props.pageSize && !props.error\n  const currentPageData = props.data.slice((currentPage - 1) * props.pageSize, currentPage * props.pageSize)\n\n  return (\n    <>\n      <BaseTable striped bordered hover size='sm'>\n        <thead>\n          <tr>\n            {Object.values(props.headers).map((header, i) => {\n              const columnWidth = props.columnWidths?.[i]\n                ? { width: `${(props.columnWidths?.[i] / 12) * 100}%` }\n                : undefined\n\n              return <th key={header} style={columnWidth}>{header}</th>\n            })}\n          </tr>\n        </thead>\n        <tbody>\n          {props.isLoading ? (\n            <>\n              {Array.from({ length: props.pageSize }).map((_, i) => (\n                <tr key={i}>\n                  {Object.keys(props.headers).map(headerKey => (\n                    <td key={headerKey}>\n                      <Skeleton />\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </>\n          ) : props.error ? (\n            <tr>\n              <td colSpan={Object.keys(props.headers).length}>\n                <InlineError error={props.error} />\n              </td>\n            </tr>\n          ) : !props.data.length ? (\n            <tr>\n              <td colSpan={Object.keys(props.headers).length}>\n                <p className='m-0'>{props.noDataMsg}</p>\n              </td>\n            </tr>\n          ) : (\n            <>\n              {currentPageData.map(dataRow => (\n                <tr key={dataRow.id}>\n                  {Object.keys(props.headers).map(headerKey => (\n                    <td key={headerKey}>\n                      <ClampLines\n                        text={dataRow[headerKey]}\n                        className='table--data-clamp'\n                        lines={2}\n                        id={`${dataRow.id}-${headerKey}`}\n                        moreText='+'\n                        lessText='-'\n                      />\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </>\n          )}\n        </tbody>\n      </BaseTable>\n      {shouldRenderPagination && (\n        <Pagination>\n          {Array.from({ length: Math.ceil(props.data.length / props.pageSize) })\n            .map((_, i) => {\n              const pageNumber = i + 1\n\n              return (\n                <Pagination.Item\n                  onClick={() => setCurrentPage(pageNumber)}\n                  key={pageNumber}\n                  active={currentPage === pageNumber}\n                >\n                  {pageNumber}\n                </Pagination.Item>\n              )\n            })}\n        </Pagination>\n      )}\n    </>\n  )\n}\n\nexport default Table\n","import React, { FC, useState } from 'react'\n\nimport { useRestaurants } from 'api'\nimport ContentWithSidebar, { Header, Sidebar, MainContent, Body } from 'layouts/ContentWithSidebar'\n\nimport RestaurantSearchControls, { RestaurantSearchControlData } from './components/RestaurantSearchControls'\nimport RestaurantSearchHeader from './components/RestaurantSearchHeader'\nimport RestaurantTable from './components/RestaurantTable'\nimport { useFilteredData } from './RestaurantSearch.hooks'\n\nconst RestaurantSearch: FC = () => {\n  const [controlData, setControlData] = useState()\n  const { data, isLoading, error } = useRestaurants()\n\n  const handleSearchSubmit = (controlData: RestaurantSearchControlData) => {\n    setControlData(controlData)\n  }\n\n  const filteredData = useFilteredData(data, controlData)\n\n  return (\n    <ContentWithSidebar>\n      <Header>\n        <RestaurantSearchHeader />\n      </Header>\n      <Body>\n        <Sidebar>\n          <RestaurantSearchControls\n            onSubmit={handleSearchSubmit}\n          />\n        </Sidebar>\n        <MainContent>\n          <RestaurantTable\n            data={filteredData}\n            error={error}\n            isLoading={isLoading}\n          />\n        </MainContent>\n      </Body>\n    </ContentWithSidebar>\n  )\n}\n\nexport default RestaurantSearch\n","import { useMemo } from 'react'\n\nimport { FormattedRestaurant } from 'api'\n\nimport { RestaurantSearchControlData } from './components/RestaurantSearchControls'\n\nexport const useFilteredData = (\n  restaurants?: FormattedRestaurant[],\n  controlData?: RestaurantSearchControlData\n) => (\n  useMemo(() => {\n    if (!restaurants) return []\n    if (!controlData) return restaurants\n\n    return restaurants.reduce<FormattedRestaurant[]>((filtered, restaurant) => {\n      const matchesSearch = (\n        !controlData.textSearch || (\n          restaurant.name.match(new RegExp(controlData.textSearch, 'i')) ||\n          restaurant.city.match(new RegExp(controlData.textSearch, 'i')) ||\n          restaurant.genre.join('').match(new RegExp(controlData.textSearch, 'i'))\n        )\n      )\n\n      if (!matchesSearch) return filtered\n\n      const matchesState = (\n        !controlData.stateSelect ||\n        controlData.stateSelect === restaurant.state\n      )\n\n      if (!matchesState) return filtered\n\n      const matchesGenre = (\n        !controlData.genreSelect ||\n        restaurant.genre.find(genre => genre === controlData.genreSelect)\n      )\n\n      if (!matchesGenre) return filtered\n\n      return [\n        ...filtered,\n        restaurant\n      ]\n    }, [])\n  }, [restaurants, controlData])\n)\n","import React from 'react'\nimport { IconContext } from 'react-icons'\n\n// Usually this is where I set up the router, but since this challenge is\n// essentially one route, I am just importing the example \"route\" directly.\nimport RestaurantSearch from 'routes/RestaurantSearch'\n\nconst AppComponent: React.FC = () => {\n  return (\n    <IconContext.Provider value={{}}>\n      <RestaurantSearch />\n    </IconContext.Provider>\n  )\n}\n\nexport default AppComponent\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. AppComponent is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css'\nimport 'styles/index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from 'app'\nimport * as serviceWorker from 'utils/serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}